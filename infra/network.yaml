AWSTemplateFormatVersion: '2010-09-09'
Description: Networking for MSK IAM POC with Transit Gateway connectivity

Parameters:
  CreateNAT:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Create NAT gateway and place EC2 in private subnet
  Env:
    Type: String
    Default: dev
    Description: Environment tag
  MskBrokerDomain:
    Type: String
    Default: c2.kafka.us-east-1.amazonaws.com
    Description: Domain suffix for MSK broker hostnames (e.g., c2.kafka.us-east-1.amazonaws.com)
  ExistingTransitGatewayId:
    Type: String
    Default: ''
    AllowedPattern: '^$|^tgw-[0-9a-f]+$'
    Description: Optional ID of an existing Transit Gateway (must be in the same Region)
  CreateResolver:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Create Route53 Resolver endpoints and rules

Conditions:
  CreateNATCondition: !Equals [!Ref CreateNAT, 'true']
  UseExistingTGW: !Not [!Equals [!Ref ExistingTransitGatewayId, '']]
  CreateTGWCondition: !Equals [!Ref ExistingTransitGatewayId, '']
  CreateResolverCondition: !Equals [!Ref CreateResolver, 'true']

Resources:
  VPCMSK:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/22
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-vpc'

  VPCAPP:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/22
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-vpc'

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  AppVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCAPP
      InternetGatewayId: !Ref AppInternetGateway

  AppPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCAPP
      CidrBlock: 10.1.0.0/26
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-public-az0'

  AppPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCAPP
      CidrBlock: 10.1.0.64/26
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-private-az0'

  AppPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCAPP
      CidrBlock: 10.1.0.128/26
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-private-az1'

  AppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCAPP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-public-rt'

  AppPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AppInternetGateway

  AppPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppPublicRouteTable
      SubnetId: !Ref AppPublicSubnet

  AppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCAPP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-private-rt'

  AppPrivateRoute:
    Type: AWS::EC2::Route
    Condition: CreateNATCondition
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref AppNatGateway

  AppPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable
      SubnetId: !Ref AppPrivateSubnet

  AppPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable
      SubnetId: !Ref AppPrivateSubnet2

  AppNatEIP:
    Type: AWS::EC2::EIP
    Condition: CreateNATCondition
    Properties:
      Domain: vpc

  AppNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNATCondition
    Properties:
      AllocationId: !GetAtt AppNatEIP.AllocationId
      SubnetId: !Ref AppPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nat'

  MskSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCMSK
      CidrBlock: 10.0.0.0/26
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-private-az0'

  MskSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCMSK
      CidrBlock: 10.0.0.64/26
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-private-az1'

  MskRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCMSK
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-private-rt'

  MskSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MskRouteTable
      SubnetId: !Ref MskSubnet1

  MskSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MskRouteTable
      SubnetId: !Ref MskSubnet2
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Condition: CreateTGWCondition
    Properties:
      AmazonSideAsn: 64512
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: enable
      DefaultRouteTablePropagation: enable
      DnsSupport: enable
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-tgw'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  TransitGatewayRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-tgw-rt'

  TgwAttachmentApp:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    DependsOn:
      - TransitGateway
      - TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]
      VpcId: !Ref VPCAPP
      SubnetIds:
        - !Ref AppPrivateSubnet
        - !Ref AppPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-attach'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  TgwAttachmentMsk:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    DependsOn:
      - TransitGateway
      - TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]
      VpcId: !Ref VPCMSK
      SubnetIds:
        - !Ref MskSubnet1
        - !Ref MskSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-attach'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  TgwRouteTableAssociationApp:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwAttachmentApp
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TgwRouteTableAssociationMsk:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwAttachmentMsk
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TgwRouteTablePropagationApp:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwAttachmentApp
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TgwRouteTablePropagationMsk:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwAttachmentMsk
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TgwRouteApp:
    Type: AWS::EC2::TransitGatewayRoute
    DependsOn:
      - TransitGatewayRouteTable
      - TgwAttachmentApp
    Properties:
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
      DestinationCidrBlock: 10.1.0.0/22
      TransitGatewayAttachmentId: !Ref TgwAttachmentApp

  TgwRouteMsk:
    Type: AWS::EC2::TransitGatewayRoute
    DependsOn:
      - TransitGatewayRouteTable
      - TgwAttachmentMsk
    Properties:
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
      DestinationCidrBlock: 10.0.0.0/22
      TransitGatewayAttachmentId: !Ref TgwAttachmentMsk

  AppToMskTgwRoutePublic:
    Type: AWS::EC2::Route
    DependsOn: TgwAttachmentApp
    Properties:
      RouteTableId: !Ref AppPublicRouteTable
      DestinationCidrBlock: 10.0.0.0/22
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]

  AppToMskTgwRoutePrivate:
    Type: AWS::EC2::Route
    DependsOn: TgwAttachmentApp
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable
      DestinationCidrBlock: 10.0.0.0/22
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]

  MskToAppTgwRoute:
    Type: AWS::EC2::Route
    DependsOn: TgwAttachmentMsk
    Properties:
      RouteTableId: !Ref MskRouteTable
      DestinationCidrBlock: 10.1.0.0/22
      TransitGatewayId: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]

  ResolverOutboundSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResolverCondition
    Properties:
      GroupDescription: Allow DNS queries from app VPC to outbound endpoint
      VpcId: !Ref VPCAPP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.1.0.0/22
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.1.0.0/22
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-resolver-out-sg'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  ResolverInboundSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResolverCondition
    Properties:
      GroupDescription: Allow DNS queries from app VPC to inbound endpoint
      VpcId: !Ref VPCMSK
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.1.0.0/22
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.1.0.0/22
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-resolver-in-sg'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  MskResolverInbound:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Condition: CreateResolverCondition
    Properties:
      Name: !Sub '${AWS::StackName}-inbound'
      Direction: INBOUND
      IpAddresses:
        - SubnetId: !Ref MskSubnet1
          Ip: 10.0.0.10
        - SubnetId: !Ref MskSubnet2
          Ip: 10.0.0.74
      SecurityGroupIds:
        - !Ref ResolverInboundSG
      Tags:
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  AppResolverOutbound:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Condition: CreateResolverCondition
    Properties:
      Name: !Sub '${AWS::StackName}-outbound'
      Direction: OUTBOUND
      IpAddresses:
        - SubnetId: !Ref AppPrivateSubnet
        - SubnetId: !Ref AppPrivateSubnet2
      SecurityGroupIds:
        - !Ref ResolverOutboundSG
      Tags:
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  MskResolverRule:
    Type: AWS::Route53Resolver::ResolverRule
    Condition: CreateResolverCondition
    Properties:
      Name: !Sub '${AWS::StackName}-msk'
      RuleType: FORWARD
      DomainName: !Ref MskBrokerDomain
      ResolverEndpointId: !Ref AppResolverOutbound
      TargetIps:
        - Ip: 10.0.0.10
          Port: 53
        - Ip: 10.0.0.74
          Port: 53
      Tags:
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  AppResolverRuleAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Condition: CreateResolverCondition
    Properties:
      Name: !Sub '${AWS::StackName}-msk-assoc'
      ResolverRuleId: !Ref MskResolverRule
      VPCId: !Ref VPCAPP

  EC2ClientSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 client security group
      VpcId: !Ref VPCAPP
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ec2-sg'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env

  MSKSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MSK broker security group
      VpcId: !Ref VPCMSK
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9098
          ToPort: 9098
          CidrIp: 10.1.0.0/22
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-msk-sg'
        - Key: Stack
          Value: !Sub '${AWS::StackName}'
        - Key: Env
          Value: !Ref Env
        
Outputs:
  MskSubnetIds:
    Value: !Join [",", [!Ref MskSubnet1, !Ref MskSubnet2]]
  Ec2SubnetId:
    Value: !If [CreateNATCondition, !Ref AppPrivateSubnet, !Ref AppPublicSubnet]
  Ec2SecurityGroupId:
    Value: !Ref EC2ClientSG
  MskSecurityGroupId:
    Value: !Ref MSKSG
  TransitGatewayId:
    Value: !If [UseExistingTGW, !Ref ExistingTransitGatewayId, !Ref TransitGateway]
